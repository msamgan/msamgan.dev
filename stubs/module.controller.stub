<?php

namespace App\Http\Controllers;

use App\Actions\Notification\NotifyUser;
use App\Actions\{studly}\Create{studly};
use App\Actions\{studly}\Update{studly};
// use App\Http\Requests\Delete{studly}Request;
use App\Http\Requests\Store{studly}Request;
use App\Http\Requests\Update{studly}Request;
use App\Models\{studly};
use App\Notifications\{studly}Created;
// use App\Notifications\{studly}Deleted;
use App\Notifications\{studly}Updated;
use Exception;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;
use Inertia\Inertia;
use Inertia\Response;

class {studly}Controller extends Controller
{
    public function index(): Response
    {
        return Inertia::render('{studly}/Index');
    }

    /**
     * @throws Exception
     */
    public function store(Store{studly}Request $request, Create{studly} $create{studly}, NotifyUser $notifyUser): void
    {
        DB::beginTransaction();

        try {
            ${camel} = $create{studly}->handle($request->validated());

            $notifyUser->handle(new {studly}Created(request()->user()));

            DB::commit();
        } catch (Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }

    public function show({studly} ${camel}): {studly}
    {
        // Access::businessCheck(businessId: $user->business_id);

        return ${camel};
    }

    public function update(Update{studly}Request $request, {studly} ${camel}, Update{studly} $update{studly}, NotifyUser $notifyUser): void
    {
        $update{studly}->handle(${underscoreCase}, $request->validated());

        $notifyUser->handle(new {studly}Updated(request()->user()));
    }

    /*public function destroy(Delete{studly}Request $request, {studly} ${camel}, NotifyUser $notifyUser): void
    {
        $notifyUser->handle(new {studly}Deleted(request()->user()));

        ${camel}->delete();
    }*/

    public function {plural_camel}(): Collection
    {
        return {studly}::query()
            ->orderBy('created_at', 'desc')
            ->get();
    }
}
